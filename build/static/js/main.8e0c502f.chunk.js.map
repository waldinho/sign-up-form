{"version":3,"sources":["components/Form.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","SubscribeForm","useState","firstname","setFirstname","surname","setSurname","email","setEmail","phone","setPhone","submission","setSubmission","message","setMessage","className","onSubmit","e","preventDefault","data","firstName","lastName","mobilePhone","fetch","method","body","JSON","stringify","headers","then","res","json","catch","error","console","response","log","type","name","onChange","target","value","required","maxLength","minLength","Header","src","alt","title","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"g6EAGA,IAqGMA,EAAUC,IAAOC,IAAV,KA2EEC,EAhLO,WAAO,IAAD,EAEUC,qBAFV,mBAEjBC,EAFiB,KAENC,EAFM,OAGMF,qBAHN,mBAGjBG,EAHiB,KAGRC,EAHQ,OAIEJ,qBAJF,mBAIjBK,EAJiB,KAIVC,EAJU,OAKEN,qBALF,mBAKjBO,EALiB,KAKVC,EALU,OAMYR,qBANZ,mBAMjBS,EANiB,KAMLC,EANK,OAOMV,qBAPN,mBAOjBW,EAPiB,KAORC,EAPQ,KAwCxB,OACI,kBAAChB,EAAD,KACKa,EAED,yBAAKI,UAAU,cACX,2BAAIF,IAGR,0BAAMG,SAtCO,SAAAC,GACjBA,EAAEC,iBACF,IACMC,EAAO,CACTA,KAAM,CACFC,UAAWjB,EACXkB,SAAUhB,EACVE,MAAOA,EACPe,YAAab,IAGrBc,MATW,2DASA,CACPC,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,GACrBS,QAAQ,CACJ,eAAgB,mBAChB,SAAU,gBAGjBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,KACpCrB,GAAc,GACdE,EAAW,iCAEde,MAAK,SAAAM,GAAQ,OAAID,QAAQE,IAAI,WAAYD,KACtCvB,GAAc,GACdE,EAAW,iCAaP,yBAAKC,UAAU,OACX,yBAAKA,UAAU,QACX,gDACA,2BACIsB,KAAK,OACLC,KAAK,YACLC,SAAU,SAAAtB,GAAMb,EAAaa,EAAEuB,OAAOC,QACtCC,UAAQ,KAGhB,yBAAK3B,UAAU,SACX,+CACA,2BACIsB,KAAK,OACLC,KAAK,aACLC,SAAU,SAAAtB,GAAMX,EAAWW,EAAEuB,OAAOC,QACpCC,UAAQ,MAIpB,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,QACX,2CACA,2BACIsB,KAAK,QACLC,KAAK,QACLC,SAAU,SAAAtB,GAAMT,EAASS,EAAEuB,OAAOC,QAClCC,UAAQ,KAGhB,yBAAK3B,UAAU,SACX,iDACA,2BACIsB,KAAK,MACLC,KAAK,QACLC,SAAU,SAAAtB,GAAMP,EAASO,EAAEuB,OAAOC,QAClCE,UAAU,KACVC,UAAU,SAItB,2BACI7B,UAAU,SACVsB,KAAK,SACLI,MAAM,c,ieC7F1B,IAYM3C,EAAUC,IAAOC,IAAV,KAsBE6C,EAlCA,WAEX,OACI,kBAAC,EAAD,KACI,4BAAQ9B,UAAU,cACd,yBAAKA,UAAU,OAAO+B,IAAI,uEAAuEC,IAAI,MAAMC,MAAM,QACjH,4CCMDC,MATf,WACE,OACE,yBAAKlC,UAAU,OACX,kBAAC,EAAD,MACA,kBAACmC,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.8e0c502f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst SubscribeForm = () => {\n    \n    const [firstname, setFirstname] = useState()\n    const [surname, setSurname] = useState()\n    const [email, setEmail] = useState()\n    const [phone, setPhone] = useState()\n    const [submission, setSubmission] = useState()\n    const [message, setMessage] = useState()\n\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const url ='https://ckzvgrbymezqegu.form.io/reacttestform/submission'\n        const data = { \n            data: {\n                firstName: firstname, \n                lastName: surname,\n                email: email,\n                mobilePhone: phone,\n            }\n        }\n        fetch(url, { \n            method: 'POST',\n            body: JSON.stringify(data),\n            headers:{ \n                'Content-Type': 'application/json',\n                'x-auth': 'react-test' \n            } \n        })\n        .then(res => res.json())\n        .catch(error => console.error('Error:', error),\n            setSubmission(false),\n            setMessage('Oops something went wrong...'),\n        )\n        .then(response => console.log('Success:', response),\n            setSubmission(true),\n            setMessage('Thank you for subscribing!'),\n        )\n    }\n\n    return (\n        <Wrapper>\n            {submission \n            ? \n            <div className='thank__you'>\n                <p>{message}</p>\n            </div>\n            :\n            <form onSubmit={handleSubmit}>\n                <div className='row'>\n                    <div className='left'>\n                        <label>First name: *</label>\n                        <input \n                            type=\"text\" \n                            name=\"firstname\" \n                            onChange={e => {setFirstname(e.target.value)}}\n                            required\n                        />\n                    </div>\n                    <div className='right'>\n                        <label>Last name: *</label>\n                        <input \n                            type=\"text\" \n                            name=\"surnamname\" \n                            onChange={e => {setSurname(e.target.value)}}\n                            required\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='left'>\n                        <label>Email: *</label>\n                        <input \n                            type=\"email\" \n                            name=\"email\" \n                            onChange={e => {setEmail(e.target.value)}} \n                            required\n                        />\n                    </div>\n                    <div className='right'>\n                        <label>Mobile phone: </label>\n                        <input \n                            type=\"tel\"\n                            name=\"phone\" \n                            onChange={e => {setPhone(e.target.value)}}\n                            maxLength=\"13\"\n                            minLength=\"10\"\n                        />\n                    </div>\n                </div>\n                <input \n                    className='submit'\n                    type=\"submit\" \n                    value=\"Submit\" \n                /> \n            </form>\n            }\n        </Wrapper>\n    )\n}\n    \nconst Wrapper = styled.div`\n    position: relative;\n    top: 26vh;\n    @media screen and (min-width: 600px) {\n        top: 30vh;\n    }\n    color: #fff;\n    max-width: 1024px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    text-align: left;\n    .thank__you {\n        position: relative;\n        top: 10vh;\n    }\n    form {\n        display: flex;\n        flex-direction: column;\n        .row {\n            display: flex;\n            flex-direction: column;\n            @media screen and (min-width: 600px) {\n                flex-direction: row;\n            }\n            .left {\n                display: flex;\n                flex-direction: column;\n                justify-content: flex-start;\n            }\n            .right {\n                display: flex;\n                flex-direction: column;\n                justify-content: flex-end;\n            }\n            input {\n                border: 2px solid #dadada;\n                box-sizing: border-box;\n                color: #323232;\n                font-size: 18px;\n                height: 48px;\n                line-height: 25.5px;\n                padding: 10.5px 14px 14px 14px;\n                font-family: 'Muli', sans-serif;\n                margin: 1rem 0.75rem 0 1rem;\n                @media screen and (min-width: 321px) {\n                    margin: 1rem;\n                }\n                min-width: 300px;\n            }\n            label {\n                min-width: 300px;\n                padding: 10.5px 14px 0 14px;\n            }\n        }\n        input.submit {\n            background: #333;\n            color: #fff;\n            border: 2px solid #dadada;\n            box-sizing: border-box;\n            font-size: 18px;\n            height: 48px;\n            line-height: 25.5px;\n            font-family: 'Muli', sans-serif;\n            margin: 2.5rem 0.75rem 0 1rem;\n            @media screen and (min-width: 321px) {\n                margin: 2.5rem 1rem;\n            }\n            @media screen and (min-width: 600px) {\n                width: 150px;\n            }\n        }\n    }\n`\n\nexport default SubscribeForm","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = () => {\n\n    return (\n        <Wrapper>\n            <header className='App-header'>\n                <img className='logo' src='https://www.southerncrossaustereo.com.au:443/media/1973/logo-sca.svg' alt='SCA' title='SCA'/>\n                <h3>Subscribe</h3>\n            </header>\n        </Wrapper>\n    )\n}\n\nconst Wrapper = styled.div`\n.App-header {\n    background-color: #333;\n    min-height: 10vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    min-width: 335px;\n    padding: 30px 0 0 0;\n    position: fixed;\n    top: 0;\n    width: -webkit-fill-available;\n    z-index: 2;\n    .logo {\n        width: 120px;\n    }\n}\n`\n\nexport default Header","import React from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}